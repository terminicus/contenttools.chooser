{
  "version": 3,
  "file": "gurtzeImageTool.js",
  "sourceRoot": "",
  "sources": [
    "gurtzeImageTool.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAM,MAAM,CAAC;IAAb,MAAA,UAAA,QAA+B,YAAY,CAAC,KAAK,CAAC,MAAlD;MAQY,OAAP,KAAO,CAAC,OAAD,EAAU,SAAV,EAAqB,QAArB,CAAA;AAEJ,YAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,UAAA;;QAAA,UAAA,GAAa;UACT,MAAA,EAAQ,IADC;UAET,SAAA,EAAW,OAFF;UAGT,WAAA,EAAa;QAHJ;QAKb,IAAG,CAAI,IAAC,CAAA,mBAAD,CAAqB,YAArB,EAAmC,UAAnC,CAAP;AACI,iBADJ;SALA;;;QAUA,IAAG,OAAO,CAAC,UAAX;UACI,OAAO,CAAC,UAAR,CAAA,EADJ;SAVA;;QAcA,GAAA,GAAM,YAAY,CAAC,SAAS,CAAC,GAAvB,CAAA,EAdN;;QAiBA,KAAA,GAAQ,IAAI,YAAY,CAAC,OAAjB,CAAA,EAjBR;;QAoBA,MAAA,GAAS,IAAI,MAAM,CAAC,WAAX,CAAA,EApBT;;QAuBA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,CAAA,CAAA,GAAA;UAE9B,KAAK,CAAC,IAAN,CAAA;UACA,MAAM,CAAC,IAAP,CAAA;UAEA,IAAG,OAAO,CAAC,YAAX;YACI,OAAO,CAAC,YAAR,CAAA,EADJ;;iBAGA,QAAA,CAAS,KAAT;QAR8B,CAAlC,EAvBA;;QAkCA,MAAM,CAAC,gBAAP,CAAwB,MAAxB,EAAgC,CAAC,EAAD,CAAA,GAAA;AAC5B,cAAA,MAAA,EAAA,KAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,KAAA,EAAA;UAAA,MAAA,GAAS,EAAE,CAAC,MAAH,CAAA;UACT,QAAA,GAAW,MAAM,CAAC;UAClB,SAAA,GAAY,MAAM,CAAC;UACnB,UAAA,GAAa,MAAM,CAAC;UAEpB,IAAG,CAAI,UAAP;YACI,UAAA,GAAa,CAAA,EADjB;;UAGA,UAAU,CAAC,MAAX,GAAoB,SAAU,CAAA,CAAA;UAC9B,UAAU,CAAC,GAAX,GAAiB;UACjB,UAAU,CAAC,KAAX,GAAmB,SAAU,CAAA,CAAA;UAE7B,IAAG,OAAO,CAAC,IAAR,CAAA,CAAA,KAAkB,cAArB;;YAEI,OAAO,CAAC,GAAR,CAAY,QAAZ,EAFJ;WAAA,MAAA;;YAMI,KAAA,GAAQ,IAAI,WAAW,CAAC,KAAhB,CAAsB,UAAtB,EAAR;;YAGA,CAAC,IAAD,EAAO,KAAP,CAAA,GAAgB,IAAC,CAAA,SAAD,CAAW,OAAX;YAChB,IAAI,CAAC,MAAL,CAAA,CAAa,CAAC,MAAd,CAAqB,KAArB,EAA4B,KAA5B,EAJA;;YAOA,KAAK,CAAC,KAAN,CAAA,EAbJ;;UAeA,KAAK,CAAC,IAAN,CAAA;UACA,MAAM,CAAC,IAAP,CAAA;UAEA,QAAA,CAAS,IAAT,EA9BA;;iBAiCA,IAAC,CAAA,mBAAD,CAAqB,cAArB,EAAqC,UAArC;QAlC4B,CAAhC,EAlCA;;QAuEA,GAAG,CAAC,MAAJ,CAAW,KAAX;QACA,GAAG,CAAC,MAAJ,CAAW,MAAX;QACA,KAAK,CAAC,IAAN,CAAA;eACA,MAAM,CAAC,IAAP,CAAA;MA5EI;;IARZ;;;IAEI,YAAY,CAAC,SAAS,CAAC,IAAvB,CAA4B,SAA5B,EAA+B,aAA/B;;;IAGA,SAAC,CAAA,KAAD,GAAS;;IACT,SAAC,CAAA,IAAD,GAAQ;;;;;AANZ",
  "sourcesContent": [
    "class Gurtze.ImageTool extends ContentTools.Tools.Image\r\n    # Register the tool with the toolshelf\r\n    ContentTools.ToolShelf.stow(@, 'gurtzeImage')\r\n\r\n    # The tooltip and icon modifier CSS class for the tool\r\n    @label = 'Gurtze Image'\r\n    @icon = 'image'\r\n\r\n    @apply: (element, selection, callback) ->\r\n    # Dispatch `apply` event\r\n        toolDetail = {\r\n            'tool': this,\r\n            'element': element,\r\n            'selection': selection\r\n            }\r\n        if not @dispatchEditorEvent('tool-apply', toolDetail)\r\n            return\r\n\r\n        # If supported allow store the state for restoring once the dialog is\r\n        # cancelled.\r\n        if element.storeState\r\n            element.storeState()\r\n\r\n        # Set-up the dialog\r\n        app = ContentTools.EditorApp.get()\r\n\r\n        # Modal\r\n        modal = new ContentTools.ModalUI()\r\n\r\n        # Dialog\r\n        dialog = new Gurtze.ImageDialog()\r\n\r\n        # Support cancelling the dialog\r\n        dialog.addEventListener 'cancel', () =>\r\n\r\n            modal.hide()\r\n            dialog.hide()\r\n\r\n            if element.restoreState\r\n                element.restoreState()\r\n\r\n            callback(false)\r\n\r\n        # Support saving the dialog\r\n        dialog.addEventListener 'save', (ev) =>\r\n            detail = ev.detail()\r\n            imageURL = detail.imageURL\r\n            imageSize = detail.imageSize\r\n            imageAttrs = detail.imageAttrs\r\n\r\n            if not imageAttrs\r\n                imageAttrs = {}\r\n\r\n            imageAttrs.height = imageSize[1]\r\n            imageAttrs.src = imageURL\r\n            imageAttrs.width = imageSize[0]\r\n\r\n            if element.type() is 'ImageFixture'\r\n                # Configure the image source against the fixture\r\n                element.src(imageURL)\r\n\r\n            else\r\n                # Create the new image\r\n                image = new ContentEdit.Image(imageAttrs)\r\n\r\n                # Find insert position\r\n                [node, index] = @_insertAt(element)\r\n                node.parent().attach(image, index)\r\n\r\n                # Focus the new image\r\n                image.focus()\r\n\r\n            modal.hide()\r\n            dialog.hide()\r\n\r\n            callback(true)\r\n\r\n            # Dispatch `applied` event\r\n            @dispatchEditorEvent('tool-applied', toolDetail)\r\n\r\n        # Show the dialog\r\n        app.attach(modal)\r\n        app.attach(dialog)\r\n        modal.show()\r\n        dialog.show()"
  ]
}