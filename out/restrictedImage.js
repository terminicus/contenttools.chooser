// Generated by CoffeeScript 2.2.2
(function() {
  var ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ContentTools.RestrictedImageTool = (function() {
    class RestrictedImageTool extends ContentTools.Tools.Image {
      static apply(element, selection, callback) {
        var app, dialog, modal, toolDetail;
        // Dispatch `apply` event
        toolDetail = {
          'tool': this,
          'element': element,
          'selection': selection
        };
        if (!this.dispatchEditorEvent('tool-apply', toolDetail)) {
          return;
        }
        // If supported allow store the state for restoring once the dialog is
        // cancelled.
        if (element.storeState) {
          element.storeState();
        }
        // Set-up the dialog
        app = ContentTools.EditorApp.get();
        // Modal
        modal = new ContentTools.ModalUI();
        // Dialog
        dialog = new ContentTools.RestrictedImageDialog();
        // Support cancelling the dialog
        dialog.addEventListener('cancel', () => {
          modal.hide();
          dialog.hide();
          if (element.restoreState) {
            element.restoreState();
          }
          return callback(false);
        });
        // Support saving the dialog
        dialog.addEventListener('save', (ev) => {
          var detail, image, imageAttrs, imageSize, imageURL, index, node;
          detail = ev.detail();
          imageURL = detail.imageURL;
          imageSize = detail.imageSize;
          imageAttrs = detail.imageAttrs;
          if (!imageAttrs) {
            imageAttrs = {};
          }
          imageAttrs.height = imageSize[1];
          imageAttrs.src = imageURL;
          imageAttrs.width = imageSize[0];
          if (element.type() === 'ImageFixture') {
            // Configure the image source against the fixture
            element.src(imageURL);
          } else {
            // Create the new image
            image = new ContentEdit.Image(imageAttrs);
            // Find insert position
            [node, index] = this._insertAt(element);
            node.parent().attach(image, index);
            // Focus the new image
            image.focus();
          }
          modal.hide();
          dialog.hide();
          callback(true);
          // Dispatch `applied` event
          return this.dispatchEditorEvent('tool-applied', toolDetail);
        });
        // Show the dialog
        app.attach(modal);
        app.attach(dialog);
        modal.show();
        return dialog.show();
      }

    };

    // Register the tool with the toolshelf
    ContentTools.ToolShelf.stow(RestrictedImageTool, 'restrictedImage');

    // The tooltip and icon modifier CSS class for the tool
    RestrictedImageTool.label = 'Image';

    RestrictedImageTool.icon = 'image';

    return RestrictedImageTool;

  }).call(this);

  ref = ContentTools.RestrictedImageDialog = class RestrictedImageDialog extends ContentTools.DialogUI {
    constructor() {
      super('Select image');
      this._onImageSelect = this._onImageSelect.bind(this);
      if (this.constructor.IMAGE_GALLERY) {
        this.constructor.IMAGE_GALLERY(this);
      }
    }

    mount() {
      super.mount();
      return this._addDOMEventListeners();
    }

    setSource(imglist) {
      var domView, tags;
      tags = imglist.map(function(img) {
        var tag;
        tag = document.createElement('img');
        tag.setAttribute('src', img.src);
        return tag;
      });
      domView = this._domView;
      return tags.forEach(function(tag) {
        return domView.appendChild(tag);
      });
    }

    _addDOMEventListeners() {
      super._addDOMEventListeners();
      return this._domView.addEventListener('click', this._onImageSelect);
    }

    _onImageSelect(e) {
      var size, url;
      boundMethodCheck(this, ref);
      if (e.target.tagName.toUpperCase() === 'img'.toUpperCase()) {
        e.preventDefault();
        url = e.target.getAttribute('src');
        size = [200, 200];
        return this.save(url, size, {});
      }
    }

    save(imageURL, imageSize, imageAttrs) {
      // Save and insert the current image
      return this.dispatchEvent(this.createEvent('save', {
        'imageURL': imageURL,
        'imageSize': imageSize,
        'imageAttrs': imageAttrs
      }));
    }

    static EXAMPLE_IMAGE_GALLERY(dialog) {
      console.log('fetching imglist...');
      return setTimeout(function() {
        console.log('fetched imglist');
        return dialog.setSource([
          {
            src: 'https://www.placecage.com/gif/200/300'
          },
          {
            src: 'https://www.placecage.com/gif/200/100'
          },
          {
            src: 'https://www.placecage.com/gif/250/250'
          },
          {
            src: 'https://www.placecage.com/gif/300/200'
          },
          {
            src: 'https://www.placecage.com/gif/400/400'
          },
          {
            src: 'https://www.placecage.com/gif/200/200'
          }
        ]);
      }, 1 * 1000);
    }

  };

}).call(this);

//# sourceMappingURL=restrictedImage.js.map
